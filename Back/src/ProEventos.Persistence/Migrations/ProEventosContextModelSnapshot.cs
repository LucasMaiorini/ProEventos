// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProEventos.Persistence;
using ProEventos.Persistence.Contexts;

namespace ProEventos.Persistence.Migrations
{
    [DbContext(typeof(ProEventosContext))]
    partial class ProEventosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("ProEventos.Domain.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("ProEventos.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProEventos.Domain.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpeecherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeecherId");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("ProEventos.Domain.Speecher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Speechers");
                });

            modelBuilder.Entity("ProEventos.Domain.SpeecherEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpeecherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "SpeecherId");

                    b.HasIndex("SpeecherId");

                    b.ToTable("SpeecherEvents");
                });

            modelBuilder.Entity("ProEventos.Domain.Batch", b =>
                {
                    b.HasOne("ProEventos.Domain.Event", "Event")
                        .WithMany("Batches")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ProEventos.Domain.SocialNetwork", b =>
                {
                    b.HasOne("ProEventos.Domain.Event", "Event")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("EventId");

                    b.HasOne("ProEventos.Domain.Speecher", "Speecher")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("SpeecherId");

                    b.Navigation("Event");

                    b.Navigation("Speecher");
                });

            modelBuilder.Entity("ProEventos.Domain.SpeecherEvent", b =>
                {
                    b.HasOne("ProEventos.Domain.Event", "Event")
                        .WithMany("SpeecherEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProEventos.Domain.Speecher", "Speecher")
                        .WithMany("SpeecherEvents")
                        .HasForeignKey("SpeecherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Speecher");
                });

            modelBuilder.Entity("ProEventos.Domain.Event", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("SocialNetworks");

                    b.Navigation("SpeecherEvents");
                });

            modelBuilder.Entity("ProEventos.Domain.Speecher", b =>
                {
                    b.Navigation("SocialNetworks");

                    b.Navigation("SpeecherEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
